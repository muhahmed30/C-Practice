#include <stdio.h>
#include <stdlib.h>

//Author: Muhammad Ahmed
//Purpose: Deleting Nodes from a doubly linked list

struct node
{
    int data;
    struct node *prev;
    struct node *next;
};

struct node *head, *temp, *prev, *newNode, *tail;

void create();
void display();
void delBeg();
void delEnd();
void delPos();

int main()
{
    int c;
    create();
    display();
    printf("Press 1 to delete from beginning, 2 to delete from end, 3 to delete from a given position\n");
    scanf("%d", &c);
    switch (c)
    {
        case 1:
        delBeg();
        break;

        case 2:
        delEnd();
        break;

        case 3:
        delPos();
        break;

        default:
        break;
    }

    return 0;
}

void create()
{
    int choice =1;
    temp = 0;
    head = 0;

    while(choice)
    {
        newNode= (struct node*) malloc(sizeof(struct node));
        printf("Enter data \n");
        scanf("%d", &newNode->data);
        newNode->prev = 0;
        newNode->next = 0;

        if (head == 0)
        {
            head = temp = newNode;
        }
        else
        {
            temp->next = newNode;
            newNode->prev = temp;
            temp = newNode;
            tail = newNode;
        }
        printf("Do you want to add a node? \n");
        scanf("%d", &choice);
    }
}

void display()
{
    temp = head;
    while (temp != 0)
    {
        printf("%d \n", temp->data);
        temp= temp->next;
    }
}

void delBeg()
{
    if (head==0)
    {
        printf("List is empty \n");
    }
    else
    {
        temp = head;
        head = head->next;
        head->prev = 0;
        free(temp);
    }
    display();
}

void delEnd()
{
    if (head == 0)
    {
        printf("List is empty \n");
    }
    else
    {
        temp = tail;
        tail = tail->prev;
        tail->next = 0;
        free(temp);
    }
    display();
}

void delPos()
{
    int i = 1;
    int pos;
    printf("Enter the position you want to delete \n");
    scanf("%d", &pos);
    if (head == 0)
    {
        printf("List is empty \n");
    }
    else
    {
        temp = head;
        while ( i < pos)
        {
            temp = temp->next;
            i++; 
        }
        temp->prev->next = temp->next;
        temp->next->prev = temp->prev;
        free(temp);
    }
    display();
}
